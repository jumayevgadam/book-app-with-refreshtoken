// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	authorModel "github.com/jumayevgadam/book-app-with-refreshtoken/internal/domain/models/author"
)

// UseCaseMock implements mm_author.UseCase
type UseCaseMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateAuthor          func(ctx context.Context, request authorModel.Request) (i1 int, err error)
	funcCreateAuthorOrigin    string
	inspectFuncCreateAuthor   func(ctx context.Context, request authorModel.Request)
	afterCreateAuthorCounter  uint64
	beforeCreateAuthorCounter uint64
	CreateAuthorMock          mUseCaseMockCreateAuthor
}

// NewUseCaseMock returns a mock for mm_author.UseCase
func NewUseCaseMock(t minimock.Tester) *UseCaseMock {
	m := &UseCaseMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateAuthorMock = mUseCaseMockCreateAuthor{mock: m}
	m.CreateAuthorMock.callArgs = []*UseCaseMockCreateAuthorParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUseCaseMockCreateAuthor struct {
	optional           bool
	mock               *UseCaseMock
	defaultExpectation *UseCaseMockCreateAuthorExpectation
	expectations       []*UseCaseMockCreateAuthorExpectation

	callArgs []*UseCaseMockCreateAuthorParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UseCaseMockCreateAuthorExpectation specifies expectation struct of the UseCase.CreateAuthor
type UseCaseMockCreateAuthorExpectation struct {
	mock               *UseCaseMock
	params             *UseCaseMockCreateAuthorParams
	paramPtrs          *UseCaseMockCreateAuthorParamPtrs
	expectationOrigins UseCaseMockCreateAuthorExpectationOrigins
	results            *UseCaseMockCreateAuthorResults
	returnOrigin       string
	Counter            uint64
}

// UseCaseMockCreateAuthorParams contains parameters of the UseCase.CreateAuthor
type UseCaseMockCreateAuthorParams struct {
	ctx     context.Context
	request authorModel.Request
}

// UseCaseMockCreateAuthorParamPtrs contains pointers to parameters of the UseCase.CreateAuthor
type UseCaseMockCreateAuthorParamPtrs struct {
	ctx     *context.Context
	request *authorModel.Request
}

// UseCaseMockCreateAuthorResults contains results of the UseCase.CreateAuthor
type UseCaseMockCreateAuthorResults struct {
	i1  int
	err error
}

// UseCaseMockCreateAuthorOrigins contains origins of expectations of the UseCase.CreateAuthor
type UseCaseMockCreateAuthorExpectationOrigins struct {
	origin        string
	originCtx     string
	originRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateAuthor *mUseCaseMockCreateAuthor) Optional() *mUseCaseMockCreateAuthor {
	mmCreateAuthor.optional = true
	return mmCreateAuthor
}

// Expect sets up expected params for UseCase.CreateAuthor
func (mmCreateAuthor *mUseCaseMockCreateAuthor) Expect(ctx context.Context, request authorModel.Request) *mUseCaseMockCreateAuthor {
	if mmCreateAuthor.mock.funcCreateAuthor != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by Set")
	}

	if mmCreateAuthor.defaultExpectation == nil {
		mmCreateAuthor.defaultExpectation = &UseCaseMockCreateAuthorExpectation{}
	}

	if mmCreateAuthor.defaultExpectation.paramPtrs != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by ExpectParams functions")
	}

	mmCreateAuthor.defaultExpectation.params = &UseCaseMockCreateAuthorParams{ctx, request}
	mmCreateAuthor.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateAuthor.expectations {
		if minimock.Equal(e.params, mmCreateAuthor.defaultExpectation.params) {
			mmCreateAuthor.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateAuthor.defaultExpectation.params)
		}
	}

	return mmCreateAuthor
}

// ExpectCtxParam1 sets up expected param ctx for UseCase.CreateAuthor
func (mmCreateAuthor *mUseCaseMockCreateAuthor) ExpectCtxParam1(ctx context.Context) *mUseCaseMockCreateAuthor {
	if mmCreateAuthor.mock.funcCreateAuthor != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by Set")
	}

	if mmCreateAuthor.defaultExpectation == nil {
		mmCreateAuthor.defaultExpectation = &UseCaseMockCreateAuthorExpectation{}
	}

	if mmCreateAuthor.defaultExpectation.params != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by Expect")
	}

	if mmCreateAuthor.defaultExpectation.paramPtrs == nil {
		mmCreateAuthor.defaultExpectation.paramPtrs = &UseCaseMockCreateAuthorParamPtrs{}
	}
	mmCreateAuthor.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateAuthor.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateAuthor
}

// ExpectRequestParam2 sets up expected param request for UseCase.CreateAuthor
func (mmCreateAuthor *mUseCaseMockCreateAuthor) ExpectRequestParam2(request authorModel.Request) *mUseCaseMockCreateAuthor {
	if mmCreateAuthor.mock.funcCreateAuthor != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by Set")
	}

	if mmCreateAuthor.defaultExpectation == nil {
		mmCreateAuthor.defaultExpectation = &UseCaseMockCreateAuthorExpectation{}
	}

	if mmCreateAuthor.defaultExpectation.params != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by Expect")
	}

	if mmCreateAuthor.defaultExpectation.paramPtrs == nil {
		mmCreateAuthor.defaultExpectation.paramPtrs = &UseCaseMockCreateAuthorParamPtrs{}
	}
	mmCreateAuthor.defaultExpectation.paramPtrs.request = &request
	mmCreateAuthor.defaultExpectation.expectationOrigins.originRequest = minimock.CallerInfo(1)

	return mmCreateAuthor
}

// Inspect accepts an inspector function that has same arguments as the UseCase.CreateAuthor
func (mmCreateAuthor *mUseCaseMockCreateAuthor) Inspect(f func(ctx context.Context, request authorModel.Request)) *mUseCaseMockCreateAuthor {
	if mmCreateAuthor.mock.inspectFuncCreateAuthor != nil {
		mmCreateAuthor.mock.t.Fatalf("Inspect function is already set for UseCaseMock.CreateAuthor")
	}

	mmCreateAuthor.mock.inspectFuncCreateAuthor = f

	return mmCreateAuthor
}

// Return sets up results that will be returned by UseCase.CreateAuthor
func (mmCreateAuthor *mUseCaseMockCreateAuthor) Return(i1 int, err error) *UseCaseMock {
	if mmCreateAuthor.mock.funcCreateAuthor != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by Set")
	}

	if mmCreateAuthor.defaultExpectation == nil {
		mmCreateAuthor.defaultExpectation = &UseCaseMockCreateAuthorExpectation{mock: mmCreateAuthor.mock}
	}
	mmCreateAuthor.defaultExpectation.results = &UseCaseMockCreateAuthorResults{i1, err}
	mmCreateAuthor.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateAuthor.mock
}

// Set uses given function f to mock the UseCase.CreateAuthor method
func (mmCreateAuthor *mUseCaseMockCreateAuthor) Set(f func(ctx context.Context, request authorModel.Request) (i1 int, err error)) *UseCaseMock {
	if mmCreateAuthor.defaultExpectation != nil {
		mmCreateAuthor.mock.t.Fatalf("Default expectation is already set for the UseCase.CreateAuthor method")
	}

	if len(mmCreateAuthor.expectations) > 0 {
		mmCreateAuthor.mock.t.Fatalf("Some expectations are already set for the UseCase.CreateAuthor method")
	}

	mmCreateAuthor.mock.funcCreateAuthor = f
	mmCreateAuthor.mock.funcCreateAuthorOrigin = minimock.CallerInfo(1)
	return mmCreateAuthor.mock
}

// When sets expectation for the UseCase.CreateAuthor which will trigger the result defined by the following
// Then helper
func (mmCreateAuthor *mUseCaseMockCreateAuthor) When(ctx context.Context, request authorModel.Request) *UseCaseMockCreateAuthorExpectation {
	if mmCreateAuthor.mock.funcCreateAuthor != nil {
		mmCreateAuthor.mock.t.Fatalf("UseCaseMock.CreateAuthor mock is already set by Set")
	}

	expectation := &UseCaseMockCreateAuthorExpectation{
		mock:               mmCreateAuthor.mock,
		params:             &UseCaseMockCreateAuthorParams{ctx, request},
		expectationOrigins: UseCaseMockCreateAuthorExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateAuthor.expectations = append(mmCreateAuthor.expectations, expectation)
	return expectation
}

// Then sets up UseCase.CreateAuthor return parameters for the expectation previously defined by the When method
func (e *UseCaseMockCreateAuthorExpectation) Then(i1 int, err error) *UseCaseMock {
	e.results = &UseCaseMockCreateAuthorResults{i1, err}
	return e.mock
}

// Times sets number of times UseCase.CreateAuthor should be invoked
func (mmCreateAuthor *mUseCaseMockCreateAuthor) Times(n uint64) *mUseCaseMockCreateAuthor {
	if n == 0 {
		mmCreateAuthor.mock.t.Fatalf("Times of UseCaseMock.CreateAuthor mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateAuthor.expectedInvocations, n)
	mmCreateAuthor.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateAuthor
}

func (mmCreateAuthor *mUseCaseMockCreateAuthor) invocationsDone() bool {
	if len(mmCreateAuthor.expectations) == 0 && mmCreateAuthor.defaultExpectation == nil && mmCreateAuthor.mock.funcCreateAuthor == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateAuthor.mock.afterCreateAuthorCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateAuthor.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateAuthor implements mm_author.UseCase
func (mmCreateAuthor *UseCaseMock) CreateAuthor(ctx context.Context, request authorModel.Request) (i1 int, err error) {
	mm_atomic.AddUint64(&mmCreateAuthor.beforeCreateAuthorCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateAuthor.afterCreateAuthorCounter, 1)

	mmCreateAuthor.t.Helper()

	if mmCreateAuthor.inspectFuncCreateAuthor != nil {
		mmCreateAuthor.inspectFuncCreateAuthor(ctx, request)
	}

	mm_params := UseCaseMockCreateAuthorParams{ctx, request}

	// Record call args
	mmCreateAuthor.CreateAuthorMock.mutex.Lock()
	mmCreateAuthor.CreateAuthorMock.callArgs = append(mmCreateAuthor.CreateAuthorMock.callArgs, &mm_params)
	mmCreateAuthor.CreateAuthorMock.mutex.Unlock()

	for _, e := range mmCreateAuthor.CreateAuthorMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateAuthor.CreateAuthorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateAuthor.CreateAuthorMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateAuthor.CreateAuthorMock.defaultExpectation.params
		mm_want_ptrs := mmCreateAuthor.CreateAuthorMock.defaultExpectation.paramPtrs

		mm_got := UseCaseMockCreateAuthorParams{ctx, request}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateAuthor.t.Errorf("UseCaseMock.CreateAuthor got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateAuthor.CreateAuthorMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.request != nil && !minimock.Equal(*mm_want_ptrs.request, mm_got.request) {
				mmCreateAuthor.t.Errorf("UseCaseMock.CreateAuthor got unexpected parameter request, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateAuthor.CreateAuthorMock.defaultExpectation.expectationOrigins.originRequest, *mm_want_ptrs.request, mm_got.request, minimock.Diff(*mm_want_ptrs.request, mm_got.request))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateAuthor.t.Errorf("UseCaseMock.CreateAuthor got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateAuthor.CreateAuthorMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateAuthor.CreateAuthorMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateAuthor.t.Fatal("No results are set for the UseCaseMock.CreateAuthor")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateAuthor.funcCreateAuthor != nil {
		return mmCreateAuthor.funcCreateAuthor(ctx, request)
	}
	mmCreateAuthor.t.Fatalf("Unexpected call to UseCaseMock.CreateAuthor. %v %v", ctx, request)
	return
}

// CreateAuthorAfterCounter returns a count of finished UseCaseMock.CreateAuthor invocations
func (mmCreateAuthor *UseCaseMock) CreateAuthorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAuthor.afterCreateAuthorCounter)
}

// CreateAuthorBeforeCounter returns a count of UseCaseMock.CreateAuthor invocations
func (mmCreateAuthor *UseCaseMock) CreateAuthorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAuthor.beforeCreateAuthorCounter)
}

// Calls returns a list of arguments used in each call to UseCaseMock.CreateAuthor.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateAuthor *mUseCaseMockCreateAuthor) Calls() []*UseCaseMockCreateAuthorParams {
	mmCreateAuthor.mutex.RLock()

	argCopy := make([]*UseCaseMockCreateAuthorParams, len(mmCreateAuthor.callArgs))
	copy(argCopy, mmCreateAuthor.callArgs)

	mmCreateAuthor.mutex.RUnlock()

	return argCopy
}

// MinimockCreateAuthorDone returns true if the count of the CreateAuthor invocations corresponds
// the number of defined expectations
func (m *UseCaseMock) MinimockCreateAuthorDone() bool {
	if m.CreateAuthorMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateAuthorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateAuthorMock.invocationsDone()
}

// MinimockCreateAuthorInspect logs each unmet expectation
func (m *UseCaseMock) MinimockCreateAuthorInspect() {
	for _, e := range m.CreateAuthorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UseCaseMock.CreateAuthor at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateAuthorCounter := mm_atomic.LoadUint64(&m.afterCreateAuthorCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateAuthorMock.defaultExpectation != nil && afterCreateAuthorCounter < 1 {
		if m.CreateAuthorMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UseCaseMock.CreateAuthor at\n%s", m.CreateAuthorMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UseCaseMock.CreateAuthor at\n%s with params: %#v", m.CreateAuthorMock.defaultExpectation.expectationOrigins.origin, *m.CreateAuthorMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateAuthor != nil && afterCreateAuthorCounter < 1 {
		m.t.Errorf("Expected call to UseCaseMock.CreateAuthor at\n%s", m.funcCreateAuthorOrigin)
	}

	if !m.CreateAuthorMock.invocationsDone() && afterCreateAuthorCounter > 0 {
		m.t.Errorf("Expected %d calls to UseCaseMock.CreateAuthor at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateAuthorMock.expectedInvocations), m.CreateAuthorMock.expectedInvocationsOrigin, afterCreateAuthorCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UseCaseMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateAuthorInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UseCaseMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UseCaseMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateAuthorDone()
}
